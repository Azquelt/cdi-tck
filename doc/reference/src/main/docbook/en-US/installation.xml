<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [ ]>
<chapter id="installation">
   <title>Installation</title>
   <para>
      This chapter explains how to obtain the TCK and supporting software and
      provides recommendations for how to install/extract it on your system.
   </para>
   <section>
      <title>Obtaining the Software</title>
      <para>
         You can obtain a release of the CDI TCK project from the from the
         <ulink url="http://seamframework.org/Download">download page</ulink>
         on Seam Framework website. The CDI TCK is distributed as a ZIP file,
         which contains the TCK artifacts (the test suite binary and source,
         porting package API binary and source, the test suite descriptor, the
         audit source and report) in
         <code>/artifacts</code>, the TCK library dependencies in
         <code>/lib</code>
         and documentation in
         <code>/doc</code>.
      </para>
      <para>
         You can also download the current source code from
         <ulink url="https://github.com/jboss/cdi-tck">GitHub repository</ulink>.
      </para>
      <para>
         The TCK project is available in the JBoss Maven repository as
         <code>org.jboss.cdi.tck:cdi-tck-impl</code>; the POM defines all
         dependencies required to run the TCK.
      </para>
      <para>
         Executing the TCK requires a Java EE 6 or better runtime environment
         (i.e., application server), to which the test artifacts are deployed
         and the individual tests are invoked. The TCK does not depend on any
         particular Java EE implementation.
      </para>
      <para>
         The JSR 346: Contexts and Dependency Injection for Java EE 1.1
         reference implementation (RI) project is named Weld. You can
         obtain the latest  release from the
         <ulink url="http://seamframework.org/Weld/Downloads">download page</ulink>
         on Seam Framework website.
      </para>
      <note>
         <para>
            Weld is not required for running the CDI TCK, but it can be
            used as a reference for familiarizing yourself with the TCK before
            testing your own CDI implementation.
         </para>
      </note>
      <para>
         Naturally, to execute Java programs, you must have a Java SE runtime
         environment. The TCK requires Java 6 or better, which you can obtain
         from the
         <ulink url="http://www.oracle.com/technetwork/java/index.html">Java Software</ulink>
         website.
      </para>
   </section>

   <section id="tck-environment">
      <title>The TCK Environment</title>

      <para>
         The TCK requires the following two Java runtime environments:
      </para>
      <itemizedlist>
         <listitem>
            <para>
               Java 6 or better
            </para>
         </listitem>
         <listitem>
            <para>
               Java EE 6 or better (e.g., JBoss AS 7.2.x or GlassFish V3)
            </para>
         </listitem>
      </itemizedlist>
      <para>
         You should refer to vendor instructions for how to install the
         runtime.
      </para>
      <para>
         The rest of the TCK software can simply be extracted. It's
         recommended that you create a folder named <emphasis>jsr346</emphasis> 
         to hold all of the jsr346-related projects. Then, extract the TCK distribution 
         into a subfolder named <emphasis>tck</emphasis>. If you have downloaded the 
         Weld distribution, extract it into a sibling folder named <emphasis>weld</emphasis>.
         The resulting folder structure is shown here:
      </para>
      <note>
         <para>
            This layout is assumed through all descriptions in this reference
            guide.
         </para>
      </note>
      <programlisting><![CDATA[jsr346/
   weld/
   tck/]]></programlisting>

      <para>
         Each test class is treated as an individual artifact. All test methods 
         (i.e., methods annotated with <literal>@Test</literal>)
         in the test class are run in the application, meaning bean discovery
         occurs exactly once per artifact and the same BeanManager is used by
         each test method in the class.
      </para>

      <tip id="tck-in-jboss-as">
         <title>
            Running the TCK against the CDI RI (Weld) and JBoss AS
         </title>

         <para>
            The CDI TCK includes a TCK runner that executes the TCK using Weld
            as the CDI implementation and JBoss AS as the Java EE runtime.
            To run the tck:
         </para>

         <itemizedlist>
            <listitem>
               <para>
                  You need to install Maven. You can find documention on how to
                  install Maven in the
                  <ulink
                     url="http://www.sonatype.com/books/maven-book/reference/installation-sect-maven-install.html">Maven: The Definitive Guide</ulink>
                  book published by Sonatype.
               </para>
            </listitem>
            <listitem>
               <para>
                  Next, instruct Maven to run the TCK:
               </para>
               <programlisting><![CDATA[cd weld/jboss-tck-runner
mvn test -Dincontainer]]></programlisting>
            </listitem>
            <listitem>
               <para>
                  TestNG will report, via Maven, the outcome of the run, and
                  report
                  any failures on the console. Details can be found in
                  <code>target/surefire-reports/TestSuite.txt</code>.
               </para>
            </listitem>
         </itemizedlist>

      </tip>
   </section>
   <section id="eclipse-plugins">
      <title>Eclipse Plugins</title>
      <para>
         Eclipse, or any other IDE, is not required to execute or pass the TCK.
         However an implementor may wish to execute tests in an IDE to aid
         debugging the tests. This section introduces two essential Eclipse
         plugins, TestNG and Maven, and points you to resources explaining
         how to install them.
      </para>
      <section id="eclipse-testng-plugin">
         <title>TestNG Plugin</title>
         <para>
            The TCK test suite is built on the TestNG. Therefore, having the TestNG plugin 
            installed in Eclipse is essential. Instructions for using the TestNG update site 
            to add the TestNG plugin to Eclipse are provided on the TestNG
            <ulink url="http://testng.org/doc/download.html">download page</ulink>.
            You can find a tutorial that explains how to use the TestNG plugin on
            the TestNG
            <ulink url="http://testng.org/doc/eclipse.html">Eclipse page</ulink>.
         </para>
      </section>
      <section id="m2e-plugin">
         <title>Maven Plugin (m2e)</title>
         <para>
            Another useful plugin is m2e. The TCK project use Maven. Therefore, to work 
            with TCK in Eclipse, you may wish to have native support for Maven projects, which the m2e
            plugin provides. Instructions for using the m2e update site to
            add the m2e plugin to Eclipse are provided on the m2e <ulink url="http://eclipse.org/m2e/">home
            page</ulink>.
         </para>
         <para>
            You can alternatively use the Eclipse plugin for Maven to
            generate native Eclipse projects from Maven projects.
         </para>
         <para>
            If you have Maven installed, you have everything you need.  Just
            execute the following command from any Maven project to produce
            the Eclipse project files.
         </para>
         <programlisting>mvn eclipse:eclipse</programlisting>
      </section>
      <para>
         Again, the Eclipse plugins are not required to execute the TCK, but
         can be very helpful when validating an implementation against the TCK
         test suite and especially when using the modules from the 
         project.
      </para>
   </section>
<!--
vim: ts=3:sw=3:tw=80:set expandtab
-->
</chapter>
