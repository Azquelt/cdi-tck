<specification 
    xmlns="http://jboss.com/products/weld/cdi-tck/audit"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://jboss.com/products/weld/cdi-tck/audit http://snapshots.jboss.org/maven2/org/hibernate/tck-utils-api/0.9-SNAPSHOT/tck-utils-api-0.9-20090220.134140-13-audit.xsd"
    name="JSR-299: Java Contexts and Dependency Injection" 
    version="Revised Public Review Draft">

  <section id="2" title="Bean definition">
    
    <assertion id="f">
      <text>A bean comprises of a set of interceptor bindings</text>
    </assertion>
    
  </section>
  
  <section id="2.7.1.2" title="Specifying interceptor bindings for a stereotype">
  
    <assertion id="a">
      <text>A stereotype may declare zero interceptor bindings</text>
    </assertion>
    
    <assertion id="b">
      <text>A stereotype may declare one interceptor binding</text>
    </assertion>
    
    <assertion id="c">
      <text>A stereotype may declare multiple interceptor bindings</text>
    </assertion>
  
  </section>

  <section id="3" title="Bean Implementation">
  
  </section>
     
   
  <section id="3.2" title="Simple beans">
    
    <assertion id="cb">
      <text>The bean class of a simple bean may not be an abstract class, _unless the simple bean is a decorator_</text>
    </assertion>
    
    <assertion id="d">
      <text>If the bean class of a simple bean is annotated with both the |@Interceptor| and |@Decorator| stereotypes, a |DefinitionException| is thrown by the container at deployment time.</text>
    </assertion>
        
  </section>
  
  <section id="3.2.1" title="Which Java classes are beans?">
  
    <assertion id="da">
      <text>A top-level abstract Java class is a simple bean if it is annotated |@Decorator|.</text>
    </assertion>
    
  </section>
  
  <section id="3.2.5" title="Simple beans with the @New binding">
    <assertion id="c">
      <text>Every class that satisfies the requirements of Section 3.2.1, "Which Java classes are beans?" is a bean, with scope, deployment type and bindings defined using annotations.  Additionally, for each such simple bean, a second simple bean exists which has _the same interceptor bindings defined by annotations_.</text>
    </assertion>
    
  </section>
  
  <section id="3.3" title="Session beans">
    
    <assertion id="f">
      <text>If the bean class of a session bean is annotated |@Interceptor|, a |DefinitionException| is thrown by the container at deployment time</text>
    </assertion>

    <assertion id="g">
      <text>If the bean class of a session bean is annotated |@Decorator|, a |DefinitionException| is thrown by the container at deployment time</text>
    </assertion>
  </section>
  
  <section id="3.3.6" title="Session beans with the @New binding">

    
    <assertion id="c">
      <text>Every EJB that satisfies the requirements of Section 3.3.2, "Which EJBs are beans?" is a bean, with scope, deployment type and bindings defined using annotations. Additionally, for each such session bean, a second bean exists which has the same interceptor bindings defined by annotations</text>
    </assertion>
       
  </section>
  
  <section id="3.8" title="Injected fields">

    <assertion id="i">
      <text>If a field is a decorator delegate attribute, it is not an injected field</text>
    </assertion>
  </section>
  
  <section id="3.10" title="Support for Common Annotations">
    
    <assertion id="g">
      <text>Interception, as defined in |javax.interceptor| is provided by the container when annotations are applied to the bean class of a simple bean</text>
    </assertion>
    
  </section>
  
  <section id="4" title="Inheritance, specialization and realization">

  </section>
  
  <section id="4.1" title="Inheritance of type-level metadata">  
    
    <assertion id="ac">
      <text>For class X which is extended _directly_ by the bean class of a _simple_ bean Y, if X is annotated with a _interceptor binding type_ Z then Y inherits the annotation if and only if Z declares the |@Inherited| meta-annotation and Y does not declare an annotation of type Z.</text>
    </assertion>          
    
    <assertion id="af">
      <text>For class X which is extended _directly_ by the bean class of a _session_ bean Y, if X is annotated with a _interceptor binding type_ Z then Y inherits the annotation if and only if Z declares the |@Inherited| meta-annotation and Y does not declare an annotation of type Z.</text>
    </assertion>         

    <assertion id="ai">
      <text>For class X which is extended _indirectly_ by the bean class of a _simple_ bean Y, if X is annotated with a _interceptor binding type_ Z then Y inherits the annotation if and only if Z declares the |@Inherited| meta-annotation and neither Y nor any intermediate class that is a subclass of X and a superclass of Y declares an annotation of type Z.</text>
    </assertion>     

    <assertion id="al">
      <text>For class X which is extended _indirectly_ by the bean class of a _session_ bean Y, if X is annotated with a _interceptor binding type_ Z then Y inherits the annotation if and only if Z declares the |@Inherited| meta-annotation and neither Y nor any intermediate class that is a subclass of X and a superclass of Y declares an annotation of type Z.</text>
    </assertion>     
    
  </section>
  
  <section id="4.2" title="Inheritance of member-level metadata">
       
    <assertion id="ca">
      <text>For class X which is extended _directly_ by the bean class of a _simple_ bean Y, if X declares a _non-static method_ x() annotated with an interceptor binding type Z then Y inherits the binding if and only if Y does not override the method x().</text>
    </assertion>
    
    <assertion id="cb">
      <text>For class X which is extended _directly_ by the bean class of a _session_ bean Y, if X declares a _non-static method_ x() annotated with an interceptor binding type Z then Y inherits the binding if and only if Y does not override the method x().</text>
    </assertion>
    
    <assertion id="cc">
      <text>For class X which is extended _indirectly_ by the bean class of a _simple_ bean Y, if X declares a _non-static method_ x() annotated with an interceptor binding type Z then Y inherits the binding if and only if neither Y nor any intermediate class that is a subclass of X and a superclass of Y overrides the method x().</text>
    </assertion>
    
    <assertion id="cd">
      <text>For class X which is extended _indirectly_ by the bean class of a _session_ bean Y, if X declares a _non-static method_ x() annotated with an interceptor binding type Z then Y inherits the binding if and only if neither Y nor any intermediate class that is a subclass of X and a superclass of Y overrides the method x().</text>
    </assertion>
    
    <assertion id="fa">
      <text>For class X which is extended _directly_ by the bean class of a _simple_ bean Y, if Y is a decorator and X declares a delegate attribute x then Y inherits x if and only if Y does not define a delegate attribute</text>
    </assertion>
    
    <assertion id="fb">
      <text>For class X which is extended _directly_ by the bean class of a _session_ bean Y, if Y is a decorator and X declares a delegate attribute x then Y inherits x if and only if neither Y does not define a delegate attribute</text>
    </assertion>
    
    <assertion id="fc">
      <text>For class X which is extended _indirectly_ by the bean class of a _simple_ bean Y, if Y is a decorator and X declares a delegate attribute x then Y inherits x if and only if neither Y nor any intermediate class that is a subclass of X and a superclass of Y defines a delegate attribute</text>
    </assertion>
    
    <assertion id="fd">
      <text>For class X which is extended _indirectly_ by the bean class of a _session_ bean Y, if Y is a decorator and X declares a delegate attribute x then Y inherits x if and only if neither Y nor any intermediate class that is a subclass of X and a superclass of Y defines a delegate attribute</text>
    </assertion>
    
  </section>
  
  <section id="4.4" title="Realization">
  
  </section>
  
  <section id="4.4.1" title="Using realization">
    
    <assertion id="ca">
      <text>If a generic class Y declares a non-static _producer method_ with a certain combination of scope, stereotypes, bindings and interceptor bindings, then every bean X that realizes Y also has a _producer method_ with the same scope, stereotypes and interceptor bindings. The bindings for this inherited _producer method_ consist of all bindings declared by the _producer method_ of Y, excluding all bindings of Y, together with the bindings declared explicitly by X. The deployment type of the inherited _producer method_ is the deployment type of X</text>
    </assertion>
    
    <assertion id="cb">
      <text>If a generic class Y declares a non-static _producer field_ with a certain combination of scope, stereotypes, bindings and interceptor bindings, then every bean X that realizes Y also has a _producer field_ with the same scope, stereotypes and interceptor bindings. The bindings for this inherited _producer field_ consist of all bindings declared by the _producer field_ of Y, excluding all bindings of Y, together with the bindings declared explicitly by X. The deployment type of the inherited _producer field_ is the deployment type of X</text>
    </assertion>
    
  </section>
  
  <section id="5" title="Lookup, dependency injection and EL resolution">
    
  </section>
  
  <section id="5.12" title="Injection into non-contextual objects">
    
  </section>
  
  <section id="5.12.1" title="Non-contextual instances of session beans">
        
    <assertion id="f">
      <text>The container is required to create interceptor stacks for session bean instances obtained directly from JNDI</text>
    </assertion>
    
    <assertion id="g">
      <text>The container is required to create interceptor stacks for session bean instances injected using |@EJB|</text>
    </assertion>
    
    <assertion id="h">
      <text>The container is required to create interceptor stacks for session bean instances injected using |@Resource|</text>
    </assertion>
    
    <assertion id="i">
      <text>The container is required to create interceptor stacks for session bean instances created by the container to receive remote method calls</text>
    </assertion>
    
    <assertion id="j">
      <text>The container is required to create interceptor stacks for session bean instances created by the container to receive timeouts</text>
    </assertion>
    
    <assertion id="k">
      <text>The container is required to create decorator stacks for session bean instances obtained directly from JNDI</text>
    </assertion>
    
    <assertion id="l">
      <text>The container is required to create decorator stacks for session bean instances injected using |@EJB|</text>
    </assertion>
    
    <assertion id="m">
      <text>The container is required to create decorator stacks for session bean instances injected using |@Resource|</text>
    </assertion>
    
    <assertion id="n">
      <text>The container is required to create decorator stacks for session bean instances created by the container to receive remote method calls</text>
    </assertion>
    
    <assertion id="o">
      <text>The container is required to create decorator stacks for session bean instances created by the container to receive timeouts</text>
    </assertion>
    
    <assertion id="q">
      <text>For the purposes of interceptor stack creation, the container must treat non-contextual instances of session beans as instances of the most specialized bean that specializes the bean with binding |@New| and deployment type |@Standard| defined in Section 3.3.6, "Session beans with the |@New| binding"</text>
    </assertion>
    
    <assertion id="r">
      <text>For the purposes of decorator stack creation, the container must treat non-contextual instances of session beans as instances of the most specialized bean that specializes the bean with binding |@New| and deployment type |@Standard| defined in Section 3.3.6, "Session beans with the |@New| binding"</text>
    </assertion>
    
  </section>
  
  <section id="5.12.2" title="Message-driven beans">
    
    <assertion id="b">
      <text>The container creates interceptor stacks for message-driven bean instances according to the bean class annotations</text>
    </assertion>
    
    <assertion id="c">
      <text>The container creates decorator stacks for message-driven bean instances according to the bean class annotations</text>
    </assertion>
  </section>
  
  <section id="6" title="Bean lifecycle">
    
  </section>
  
  <section id="6.2" title="Creation">
    
    
    <assertion id="b">
      <text>The |Contextual.create()| method creates the interceptor stacks and binds them to the instance</text>
    </assertion>
    
    <assertion id="c">
      <text>The |Contextual.create()| method creates the decorator stacks and binds them to the instance</text>
    </assertion>

  </section>
  
  <section id="6.4" title="Lifecycle of simple beans">
    <assertion id="a">
      <text>When the |create()| method of the |Bean| object that represents a simple bean is called, the container first calls the bean constructor to obtain an instance of the bean. For each constructor parameter, the container passes the object returned by |Manager.getInstanceToInject()|. The container is permitted to return an instance of a container-generated subclass of the bean class, allowing interceptor and decorator bindings</text>
    </assertion>
    
    <assertion id="h">
      <text>When the |create()| method of the |Bean| object that represents a simple bean is called, after all initializer methods are called the container builds the interceptor stacks for the instance as defined in Section A.3.10 "Interceptor stack creation"</text>
    </assertion>
    
    <assertion id="i">
      <text>When the |create()| method of the |Bean| object that represents a simple bean is called, after all initializer methods are called the container builds the decorator stacks for the instance as defined in Section A.5.8 "Decorator stack creation"</text>
    </assertion>
    
    <assertion id="j">
      <text>When the |create()| method of the |Bean| object that represents a simple bean is called, after the interceptor and decorator stacks are built the container calls the |@PostConstruct| method, if any</text>
    </assertion>
    
  </section>
  
  <section id="6.11" title="Lifecycle of EJBs">
    
    <assertion id="d">
      <text>When the EJB container creates a new instance of an EJB, after Java EE injection has been performed and before the |@PostConstruct| callback occurs the container builds the interceptor stacks for the instance as defined in Section A.3.10, "Interceptor stack creation" and Section A.5.8, "Decorator stack creation" and binds them to the instance</text>
    </assertion>
    
    <assertion id="e">
      <text>When the EJB container creates a new instance of an EJB, after Java EE injection has been performed and before the |@PostConstruct| callback occurs the container builds the decorator stacks for the instance as defined in Section A.3.10, "Interceptor stack creation" and Section A.5.8, "Decorator stack creation" and binds them to the instance</text>
    </assertion>
    
  </section>
  
  <section id="8" title="Scopes and contexts">
  
  </section>
  
  <section id="8.3" title="Dependent pseudo-scope">
    
    <assertion id="n">
      <text>The |@Dependent| scope is even active during invocation of interceptors and decorators of observer methods and interceptors and decorators of |@PostConstruct| and |@PreDestroy| callbacks</text>
    </assertion>
  
  </section>
  
  <section id="8.3.1" title="Dependent objects">
    
    <assertion id="b">
      <text>Instances of interceptors or decorators with scope |@Dependent| are also dependent objects of the bean they intercept or decorate</text>
    </assertion>
  </section>
  
  <section id="9" title="XML based metadata">
    
  </section>  
  
  <section id="9.12" title="Deployment declarations">
   
  </section>
  
  <section id="9.12.2" title="The &lt;Interceptors&gt; declaration">
    <assertion id="a">
      <text>Each direct child element of an |&lt;Interceptors&gt;| element is interpreted as the declaring an enabled interceptor, as specified in Section A.3.7, "Interceptor enablement and ordering".</text>
    </assertion>
    
    <assertion id="b">
      <text>Each child element is interpreted as a Java class. If no such Java class exists in the classpath, a |DefinitionException| is thrown by the container at deployment time.</text>
    </assertion>
    
    <assertion id="c">
      <text>If the same interceptor is declared more than once, a |DefinitionException| is thrown by the container at deployment time.</text>
    </assertion>
  
  </section>
  
  <section id="9.12.3" title="The &lt;Decorators&gt; declaration">
    <assertion id="a">
      <text>Each direct child element of a |&lt;Decorators&gt;| element is interpreted as the declaring an enabled decorator, as specified in Section A.5.5, "Decorator enablement and ordering".</text>
    </assertion>
    
    <assertion id="b">
      <text>Each child element is interpreted as a Java class. If no such Java class exists in the classpath, a |DefinitionException| is thrown by the container at deployment time.</text>
    </assertion>
    
    <assertion id="c">
      <text>If the same decorator is declared more than once, a |DefinitionException| is thrown by the container at deployment time.</text>
    </assertion>
  </section>
  
  <section id="11" title="Packaging and Deployment">
    
  </section>
 
  <section id="11.2" title="Bean discovery">
    
    <assertion id="p">
      <text>First, the container discovers all ~binding types, stereotypes and~ interceptor binding types declared in XML, according to the rules of Section 9.4, "Stereotype, binding type and interceptor binding type declarations".</text>
    </assertion>

    <assertion id="aa">
      <text>Next, the container determines which ~beans,~ interceptors ~and decorators~ are enabled, according to the rules defined in Section 2.5.6, "Enabled deployment types", Section A.3.7, "Interceptor enablement and ordering" and Section A.5.5, "Decorator enablement and ordering", taking into account any ~|&lt;Deploy&gt;|,~ |&lt;Interceptors&gt;| ~and |&lt;Decorators&gt;|~ declarations in the |beans.xml| files.</text>
    </assertion> 
    
    <assertion id="ab">
      <text>Next, the container determines which ~beans, interceptors and~ decorators are enabled, according to the rules defined in Section 2.5.6, "Enabled deployment types", Section A.3.7, "Interceptor enablement and ordering" and Section A.5.5, "Decorator enablement and ordering", taking into account any ~|&lt;Deploy&gt;|, |&lt;Interceptors&gt;| and~ |&lt;Decorators&gt;| declarations in the |beans.xml| files.</text>
    </assertion>
    
    <assertion id="ad">
      <text>For each enabled interceptor, the container creates an instance of |Interceptor| and registers it by calling |Manager.addInterceptor()|</text>
    </assertion>
    
    <assertion id="ae">
      <text>For each enabled decorator, the container creates an instance of |Decorator| and registers it by calling |Manager.addDecorator()|.</text>
    </assertion>

  </section>
    
  <section id="11.4" title="Providing additional XML based metadata"> 
    
  </section>
  
  <section id="11.6" title="Activities">
    
    <assertion id="e">
      <text>Every interceptor ~and decorator~ belonging to a parent activity also belongs to the child activity ~and may be applied to any bean belonging to the child activity~</text> 
    </assertion>
    
    <assertion id="f">
      <text>Every interceptor ~and decorator~ belonging to a parent activity ~also belongs to the child activity and~ may be applied to any bean belonging to the child activity</text> 
    </assertion>
    
    <assertion id="g">
      <text>Every ~interceptor and~ decorator belonging to a parent activity also belongs to the child activity and~ may be applied to any bean belonging to the child activity~</text> 
    </assertion>
    
    <assertion id="h">
      <text>Every ~interceptor and~ decorator belonging to a parent activity ~also belongs to the child activity and~ may be applied to any bean belonging to the child activity</text> 
    </assertion>
   
    <assertion id="v">
      <text>The |addInterceptor()| ~and |addDecorator()|~ methods throw |UnsupportedOperationException| when called on a |Manager| object that represents a child activity.</text>
    </assertion>
    
    <assertion id="w">
      <text>The ~|addInterceptor()| and~ |addDecorator()| methods throw |UnsupportedOperationException| when called on a |Manager| object that represents a child activity.</text>
    </assertion> 
  
  </section>

</specification>
