<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [ ]>
<chapter id="introduction">
    <title>Introduction (CDI TCK)</title>

    <para>
        This chapter explains the purpose of a TCK and identifies the
        foundation elements of the CDI TCK.
    </para>
    <section>
        <title>TCK Primer</title>
        <para>
            A TCK, or Technology Compatibility Kit, is one of the three required
            pieces for any JSR (the other two being the specification document and
            the reference implementation). The TCK is a set of tools and tests to
            verify that an implementation of the technology conforms to the
            specification. The tests are the primary component, but the tools serve
            an equally critical role of providing a framework and/or set of SPIs
            for executing the tests.
        </para>
        <para>
            The tests in the TCK are derived from assertions in the written
            specification document. The assertions are itemized in an XML
            document, where they each get assigned a unique identifier, and
            materialize as a suite of automated tests that collectively validate
            whether an implementation complies with the aforementioned assertions,
            and in turn the specification. For a particular implementation to be
            certified, all of the required tests must pass (i.e., the provided
            test suite must be run unmodified).
        </para>
        <para>
            A TCK is entirely implementation agnostic. Ideally, it should validate
            assertions by consulting the specification's public API. However, when
            the information returned by the public API is not low-level enough to
            validate the assertion, the implementation must be consulted directly.
            In this case, the TCK provides an independent API as part of a porting
            package that enables this transparency. The porting package must be
            implemented for each CDI implementation.
            <xref linkend="tck-components"/>
            introduces the
            porting package and
            <xref linkend="porting-package"/>
            covers the requirements for
            implementing it.
        </para>
        <note>
            <para>
                Oracle Corporation will implement the porting package for the
                CDI RI and test the CDI RI on the Java EE Reference Implementation.
            </para>
        </note>
    </section>
    <section>
        <title>Compatibility Testing</title>

        <para>
            The goal of any specification is to eliminate portability problems
            so long as the program which uses the implementation also conforms to
            the rules laid out in the specification.
        </para>
        <para>
            Executing the TCK is a form of compatibility testing. It's important
            to understand that compatibility testing is distinctly different from
            product testing. The TCK is not concerned with robustness, performance
            or ease of use, and therefore cannot vouch for how well an
            implementation meets these criteria. What a TCK can do is to ensure the
            exactness of an implementation as it relates to the specification.
        </para>
        <para>
            Compatibility testing of any feature relies on both a complete
            specification and a complete reference implementation. The reference
            implementation demonstrates how each test can be passed and provides
            additional context to the implementor during development for the
            corresponding assertion.
        </para>

        <section>
            <title>Why Compatibility Is Important</title>
            <para>
                Java platform compatibility is important to different groups
                involved with Java technologies for different reasons:
            </para>
            <itemizedlist>
                <listitem>
                    <para>
                        Compatibility testing is the means by which the JCP ensures
                        that the Java platform does not become fragmented as it's
                        ported to different operating systems and hardware.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Compatibility testing benefits developers working in the
                        Java programming language, enabling them to write applications
                        once and deploy them across heterogeneous computing
                        environments without porting.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Compatibility testing enables application users to obtain
                        applications from disparate sources and deploy them with
                        confidence.
                    </para>
                </listitem>
                <listitem>
                    <para>Conformance testing benefits Java platform implementors by
                        ensuring the same extent of reliability for all Java platform
                        ports.
                    </para>
                </listitem>
            </itemizedlist>
            <para>
                The CDI specification goes to great lengths to ensure that
                programs written for Java EE are compatible and the TCK is rigorous
                about enforcing the rules the specification lays down.
            </para>
        </section>
    </section>
    <section>
        <title>Compatibility Requirements</title>
        <para>The compatibility requirements for Contexts and Dependency Injection for Java EE 1.2 consist of meeting the requirements set
            forth by the rules and associated definitions contained in this section.
        </para>
        <section>
            <title>Definitions</title>
            <para>
                These definitions are for use only with these compatibility requirements and are not intended for any other purpose.
            </para>
            <table frame="all">
                <title>Definitions</title>
                <tgroup cols="2">
                    <colspec colnum="1" colname="Term" colwidth="5*"/>
                    <colspec colnum="2" colname="Defintion" colwidth="2*"/>
                    <thead>
                        <row>
                            <entry>Term</entry>
                            <entry>Definition</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry valign="top">
                                API Definition Product
                            </entry>
                            <entry>
                                A Product for which the only Java class files contained in the product are those corresponding to
                                the application programming interfaces defined by the Specifications, and which is intended only
                                as a means for formally specifying the application programming interfaces defined by the Specifications.
                            </entry>
                        </row>
                        <row>
                            <entry valign="top">
                                Computational Resource
                            </entry>
                            <entry>
                                A piece of hardware or software that may vary in quantity, existence, or version, which may be
                                required to exist in a minimum quantity and/or at a specific or minimum revision level so as
                                to satisfy the requirements of the Test Suite. Examples of computational resources that may vary
                                in quantity are RAM and file descriptors. Examples of computational resources that may vary
                                in existence (that is, may or may not exist) are graphics cards and device drivers. Examples of computational resources
                                that may vary in version are operating systems and device drivers.
                            </entry>
                        </row>
                        <row>
                            <entry valign="top">
                                Conformance Tests
                            </entry>
                            <entry>
                                All tests in the Test Suite for an indicated Technology Under Test, as distributed by the Maintenance Lead,
                                excluding those tests on the Exclude List for the Technology Under Test.
                            </entry>
                        </row>
                        <row>
                            <entry valign="top">
                                Documented
                            </entry>
                            <entry>
                                Made technically accessible and made known to users, typically by means such as marketing materials,
                                product documentation, usage messages, or developer support programs.
                            </entry>
                        </row>
                        <row>
                            <entry valign="top">
                                Edition
                            </entry>
                            <entry>
                                A Version of the Java Platform. Editions include Java Platform Standard Edition and Java Platform Enterprise Edition.
                            </entry>
                        </row>
                        <row>
                            <entry valign="top">
                                Exclude List
                            </entry>
                            <entry>
                                The most current list of tests, distributed by the Maintenance Lead or TCK Lead, that are not required
                                to be passed to certify conformance. The Maintenance Lead or TCK Lead may add to the Exclude List for that Test Suite
                                as needed at any time, in which case the updated Exclude List supplants any previous Exclude Lists for that Test Suite.
                            </entry>
                        </row>
                        <row>
                            <entry valign="top">
                                Libraries
                            </entry>
                            <entry>
                                The class libraries, as specified through the Java Community Process (JCP), for the Technology Under Test.
                                The Libraries for Contexts and Dependency Injection for Java EE 1.2 are listed in
                                <xref linkend="libraries"/>.
                            </entry>
                        </row>
                        <row>
                            <entry valign="top">
                                Location Resource
                            </entry>
                            <entry>
                                A location of classes or native libraries that are components of the test tools or tests,
                                such that these classes or libraries may be required to exist in a certain location in order
                                to satisfy the requirements of the test suite. For example, classes may be required to exist
                                in directories named in a CLASSPATH variable, or native libraries may be required to exist in
                                directories named in a PATH variable.
                            </entry>
                        </row>
                        <row>
                            <entry valign="top">
                                Maintenance Lead
                            </entry>
                            <entry>
                                The Java Community Process member responsible for maintaining the Specification, reference implementation,
                                and TCK for the Technology. Red Hat is the Maintenance Lead for Contexts and Dependency Injection for Java EE 1.2.
                            </entry>
                        </row>
                        <row>
                            <entry valign="top">
                                Operating Mode
                            </entry>
                            <entry>
                                Any Documented option of a Product that can be changed by a user in order to modify the behavior of the Product.
                                For example, an Operating Mode can be binary (enable/disable optimization), an enumeration (select from a list of protocols),
                                or a range (set the maximum number of active threads). Note that an Operating Mode may be selected by a command line switch,
                                an environment variable, a GUI user interface element, a configuration or control file, etc.
                            </entry>
                        </row>
                        <row>
                            <entry valign="top">
                                Product
                            </entry>
                            <entry>
                                A licensee product in which the Technology Under Test is implemented or incorporated, and that is subject to compatibility
                                testing.
                            </entry>
                        </row>
                        <row>
                            <entry valign="top">
                                Product Configuration
                            </entry>
                            <entry>
                                A specific setting or instantiation of an Operating Mode. For example, a Product supporting an Operating Mode that permits user
                                selection of an
                                external encryption package may have a Product Configuration that links the Product to that encryption package.
                            </entry>
                        </row>
                        <row>
                            <entry valign="top">
                                Reference Implementation (RI)
                            </entry>
                            <entry>
                                The prototype or "proof of concept" implementation of a Specification.
                            </entry>
                        </row>
                        <row>
                            <entry valign="top">
                                Resource
                            </entry>
                            <entry>
                                A Computational Resource, a Location Resource, or a Security Resource.
                            </entry>
                        </row>
                        <row>
                            <entry valign="top">
                                Rules
                            </entry>
                            <entry>
                                These definitions and rules in this Compatibility Requirements section of this User’s Guide.
                            </entry>
                        </row>
                        <row>
                            <entry valign="top">
                                Specifications
                            </entry>
                            <entry>
                                The documents produced through the Java Community Process that define a particular Version of a Technology.
                                The Specifications for the Technology Under Test are referenced later in this chapter.
                            </entry>
                        </row>
                        <row>
                            <entry valign="top">
                                TCK Lead
                            </entry>
                            <entry>
                                Person responsible for maintaining TCK for the Technology. TCK Lead is deputy of Red Hat.
                            </entry>
                        </row>
                        <row>
                            <entry valign="top">
                                Technology
                            </entry>
                            <entry>
                                Specifications and a reference implementation produced through the Java Community Process.
                            </entry>
                        </row>
                        <row>
                            <entry valign="top">
                                Technology Under Test
                            </entry>
                            <entry>
                                Specifications and the reference implementation for Contexts and Dependency Injection for Java EE 1.2.
                            </entry>
                        </row>
                        <row>
                            <entry valign="top">
                                Test Suite
                            </entry>
                            <entry>
                                The requirements, tests, and testing tools distributed by the Maintenance Lead or TCK Lead as applicable to a given Version of
                                the Technology.
                            </entry>
                        </row>
                        <row>
                            <entry valign="top">
                                Version
                            </entry>
                            <entry>
                                A release of the Technology, as produced through the Java Community Process.
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section>
            <title>Rules for Contexts and Dependency Injection for Java EE 1.2 Products</title>
            <para>
                <emphasis role="bold">CDI-1</emphasis>
                The Product must be able to satisfy all applicable compatibility requirements, including passing all Conformance Tests,
                in every Product Configuration and in every combination of Product Configurations, except only as specifically exempted by these Rules.

                For example, if a Product provides distinct Operating Modes to optimize performance, then that Product must satisfy all applicable compatibility
                requirements
                for a Product in each Product Configuration, and combination of Product Configurations, of those Operating Modes.
            </para>
            <para>
                <emphasis role="bold">CDI-1.1</emphasis>
                If an Operating Mode controls a Resource necessary for the basic execution of the Test Suite, testing may
                always use a Product Configuration of that Operating Mode providing that Resource, even if other Product Configurations do not provide that
                Resource.
                Notwithstanding such exceptions, each Product must have at least one set of Product Configurations of such Operating Modes that is able to pass
                all
                the Conformance Tests.
                For example, a Product with an Operating Mode that controls a security policy which has one or more Product Configurations that cause
                Conformance
                Tests to fail may be tested
                using a Product Configuration that allows all Conformance Tests to pass.
            </para>
            <para>
                <emphasis role="bold">CDI-1.2</emphasis>
                A Product Configuration of an Operating Mode that causes the Product to report only version, usage, or diagnostic information is exempted from
                these
                compatibility rules.
            </para>
            <para>
                <emphasis role="bold">CDI-1.3</emphasis>
                A Product may contain an Operating Mode that selects the Edition with which it is compatible. The Product must meet the compatibility
                requirements
                for the corresponding Edition for all
                Product Configurations of this Operating Mode. This Operating Mode must affect no smaller unit of execution than an entire Application.
            </para>
            <para>
                <emphasis role="bold">CDI-1.4</emphasis>
                An API Definition Product is exempt from all functional testing requirements defined here, except the signature tests.
            </para>
            <para>
                <emphasis role="bold">CDI-2</emphasis>
                Some Conformance Tests may have properties that may be changed. Properties that can be changed are identified in the configuration interview.
                Properties that can be changed are specified in<xref linkend="tck-properties"/>. Apart from changing such properties and other allowed
                modifications
                described in this User’s Guide (if any),
                no source or binary code for a Conformance Test may be altered in any way without prior written permission.
            </para>
            <para>
                <emphasis role="bold">CDI-3</emphasis>
                The testing tools supplied as part of the Test Suite or as updated by the Maintenance Lead or TCK Lead must be used to certify compliance.
            </para>
            <para>
                <emphasis role="bold">CDI-4</emphasis>
                The Exclude List associated with the Test Suite cannot be modified.
            </para>
            <para>
                <emphasis role="bold">CDI-5</emphasis>
                The Maintenance Lead or TCK Lead can define exceptions to these Rules. Such exceptions would be made available to and apply to all licensees.
            </para>
            <para>
                <emphasis role="bold">CDI-6</emphasis>
                All hardware and software component additions, deletions, and modifications to a Documented supporting hardware/software platform, that are not
                part
                of the Product but
                required for the Product to satisfy the compatibility requirements, must be Documented and available to users of the Product. For example, if a
                patch to a particular
                version of a supporting operating system is required for the Product to pass the Conformance Tests, that patch must be Documented and available
                to
                users of the Product.
            </para>
            <para>
                <emphasis role="bold">CDI-7</emphasis>
                The Product must contain the full set of public and protected classes and interfaces for all the Libraries. Those classes and interfaces must
                contain exactly the set of public and protected methods,
                constructors, and fields defined by the Specifications for those Libraries. No subsetting, supersetting, or modifications of the public and
                protected API of the Libraries are allowed except only as specifically exempted by these Rules.
            </para>
            <para>
                <emphasis role="bold">CDI-8</emphasis>
                Except for tests specifically required by this TCK to be recompiled (if any), the binary Conformance Tests supplied as part of the Test Suite or
                as
                updated by the Maintenance Lead or TCK Lead must be used to certify compliance.
            </para>
            <para>
                <emphasis role="bold">CDI-9</emphasis>
                The functional programmatic behavior of any binary class or interface must be that defined by the Specifications.
            </para>
        </section>
    </section>

    <section>
        <title>About the CDI TCK</title>

        <para>
            The CDI TCK is designed as a portable, configurable and automated test
            suite for verifying the compatibility of an implementation of the
            JSR 346: Contexts and Dependency Injection for Java EE 1.2 specification.
            The test suite is built atop TestNG framework and Arquillian platform.
        </para>
        <para>
            Each test class in the suite acts as a deployable unit. The
            deployable units, or artifacts, can be either a WAR or an EAR.
        </para>
        <note>
            <para>
                The test archives are built with ShrinkWrap, a Java API for creating archives. ShrinkWrap is a part of the Arqullian platform ecosystem.
            </para>
        </note>

        <section>
            <title>CDI TCK Specifications and Requirements</title>
            <para>
                This section lists the applicable requirements and specifications
                for the CDI TCK.
            </para>
            <itemizedlist>
                <listitem>
                    <para>
                        <emphasis role="bold">Specification requirements</emphasis>
                        - Software requirements for a CDI implementation are itemized
                        in section 1.2, "Relationship to other specifications" in the
                        CDI specification, with details provided throughout the
                        specification. Generally, the CDI specification targets the
                        Java EE 7 platform and is aligned with its specifications.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis role="bold">Contexts and Dependency Injection for
                            Java EE 1.2 API
                        </emphasis>
                        - The Java API defined in the CDI specification and provided
                        by the reference implementation.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis role="bold">Testing platform</emphasis>
                        - The CDI TCK requires version 1.1.7.Final of the Arquillian
                        (<ulink url="http://arquillian.org">http://arquillian.org</ulink>).
                        The TCK test suite is based on TestNG 6.x
                        (<ulink url="http://testng.org">http://testng.org</ulink>).
                        .
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis role="bold">Porting Package</emphasis>
                        - An implementation of SPIs that are required for the test
                        suite to run the in-container tests and at times extend the
                        CDI 1.2 API to provide extra information to the TCK.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis role="bold">TCK Audit Tool</emphasis>
                        - An itemization of the assertions in the specification
                        documents which are cross referenced by the individual tests.
                        Describes how well the TCK covers the specification.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis role="bold">Reference runtime</emphasis>
                        - The designated reference runtime for compatibility testing
                        of the CDI specification is the Oracle Java Platform, Enterprise
                        Edition (Java EE) 7 reference implementation (RI).
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis role="bold">JSR 330</emphasis>
                        - CDI builds on JSR 330,
                        and as such JSR 346 implementations must additionally pass the
                        JSR 330 TCK.
                    </para>
                    <tip>
                        <para>
                            The TCK distribution includes
                            <literal>weld/porting-package-lib/weld-inject-tck-runner-X.Y.Z-Q-tests.jar</literal>
                            which contains two classes showing how the CDI RI passes the JSR 330
                            TCK. The source for these classes is available from
                            <ulink url="https://github.com/weld/core/tree/2.0/inject-tck-runner/src/test/java/org/jboss/weld/atinject/tck"/>
                        </para>
                    </tip>
                </listitem>
            </itemizedlist>
        </section>

        <section id="tck-components">
            <title>CDI TCK Components</title>
            <para>The CDI TCK includes the following components:</para>
            <itemizedlist>
                <listitem>
                    <para>
                        <emphasis role="bold">Arquillian 1.1.7.Final</emphasis>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis role="bold">TestNG 6.8.8</emphasis>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis role="bold">Porting Package SPIs</emphasis>
                        - Extensions to the CDI SPIs to allow testing of a
                        container.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis role="bold">The test suite</emphasis>, which is a
                        collection of TestNG tests, the TestNG test suite descriptor
                        and supplemental resources that configure CDI and other
                        software components.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis role="bold">The TCK audit</emphasis>
                        is used to list out the assertions identified in the CDI
                        specification. It matches the assertions to testcases in the
                        test suite by unique identifier and produces a coverage report.
                    </para>
                    <para>
                        The audit document is provided along with the TCK; at least
                        95% of assertions are tested. Each assertion is defined with a
                        reference to a chapter, section and paragraph from the
                        specification document, making it easy for the implementor to
                        locate the language in the specification document that
                        supports the feature being tested.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <emphasis role="bold">TCK documentation</emphasis>
                        accompanied by release notes identifying updates between
                        versions.
                    </para>
                </listitem>
            </itemizedlist>
            <note>
                <para>
                    Oracle Corporation will implement the porting package for the
                    CDI RI and test the CDI RI on the Java EE Reference
                    Implementation .
                </para>
            </note>
            <para>The CDI TCK has been tested on following platforms:</para>
            <itemizedlist>
                <listitem>
                    <para>
                        WildFly 8.x using Oracle Java SE 7 on Red Hat Enterprise
                        Linux 5.2
                    </para>
                </listitem>
            </itemizedlist>
            <para>
                CDI supports Java EE 5, Java EE 6, Java EE 6 Web Profile, Java EE 7, Java EE 7 Web Profile, Embeddable EJB 3.1, and the Embeddable EJB 3.2.
                The TCK will execute on any of these runtimes, but is only part of the CTS for Java EE 7 and Java EE 7 Web Profile.
            </para>
        </section>
    </section>
    <section id="libraries">
        <title>Libraries for Contexts and Dependency Injection for Java EE 1.2</title>
        <itemizedlist>
            <listitem>
                javax.decorator
            </listitem>
            <listitem>
                javax.enterprise.context
            </listitem>
            <listitem>
                javax.enterprise.context.spi
            </listitem>
            <listitem>
                javax.enterprise.event
            </listitem>
            <listitem>
                javax.enterprise.inject
            </listitem>
            <listitem>
                javax.enterprise.inject.spi
            </listitem>
            <listitem>
                javax.enterprise.util
            </listitem>
        </itemizedlist>
    </section>
    <!--
    vim: ts=3:sw=3:tw=80:set expandtab
    -->
</chapter>
