<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [ ]>
<chapter id="executing">
   <title>Executing the Test Suite</title>
   <para>
      This chapter explains how to run the TCK on Weld as well as your own
      implementation. The CDI TCK uses the Maven Surefire plugin and the Arquillian
      test platform to execute the test suite. Learning to execute the test suite
      from Maven is prerequisite knowledge for running the tests in an IDE,
      such as Eclipse.
   </para>
   <section>
      <title>The Test Suite Runner</title>

      <para>
         The test suite is executed by the Maven Surefire plugin during the test
         phase of the Maven life cycle. The execution happens within a TCK
         runner project (as opposed to the TCK project itself). Weld
         includes a TCK runner project that executes the CDI TCK on Weld
         running inside WildFly 8.x. To execute the CDI TCK on your own CDI
         implementation, you could modify the TCK runner project included with
         Weld to use your CDI implementation.
      </para>

   </section>

   <section>
      <title>Running the Tests In Standalone Mode</title>
      <para>
         To execute the TCK test suite against Weld, first switch to the
         jboss-tck-runner directory in the extracted TCK distribution:
      </para>

      <programlisting>cd jsr346/tck/weld/jboss-tck-runner</programlisting>
      <note>
         <para>
             These instructions assume you have extracted the jsr346-related
             software according to the recommendation given in <link linkend="tck-environment">The TCK Environment</link>.
         </para>
      </note>
      <para>
         Then execute the Maven life cycle through the test phase:
      </para>
      <programlisting>mvn test</programlisting>
      <para>
         Without any command-line flags, the test suite is run in standalone
         mode (activating weld-embedded Maven profile), which means that any
         test within the <emphasis>integration</emphasis> or
         <emphasis>javaee-full</emphasis> TestNG group is excluded. This mode uses the
         <emphasis>Weld EE Embedded Arquillian container adapter</emphasis>
         to invoke the test within a mock Java EE life cycle and
         capture the results of the test. However, passing the suite in this
         mode is not sufficient to pass the TCK as a whole. The suite must be
         passed while executing using the in-container mode.
      </para>
   </section>
   <section>
      <title>Running the Tests In the Container</title>
      <para>
         To execute the test suite using in-container mode with the JBoss TCK
         runner, you first have to setup WildFly as described in the
         <link linkend="tck-in-jboss-as">Running the TCK against the CDI RI</link> callout.
      </para>
      <para>
         Then, execute the TCK runner with Maven as follows:
      </para>
      <programlisting>mvn test -Dincontainer</programlisting>
      <para>
         The presence of the <literal>incontainer</literal> property activates an
         incontainer Maven profile. This time, all the tests in the test suite are
         executed.
      </para>
      <para>
         In order to run tests appropriate to the Java EE Web Profile execute:
      </para>
      <programlisting>mvn test -Dincontainer=webprofile</programlisting>
      <para>
         To specify particular TCK version:
      </para>
      <programlisting><![CDATA[mvn test -Dincontainer -Dcdi.tck.version=1.1.0.SP2]]></programlisting>
      <note>
         <para>
             In order to run the TCK Test Suite in the container an Arqullian container adapter is required.
             See also <ulink url="https://docs.jboss.org/author/display/ARQ/Containers">Arqullian reference guide</ulink>.
         </para>
      </note>

      <para>
         The Arquillian will also start and stop the application server automatically (provided a managed Arqullian container adapter is used).
      </para>

      <para>
         Since Arquillian in-container tests are executed in a remote JVM, the results of
         the test must be communicated back to the runner over a
         container-supported protocol. The TCK utilizes servlet-based protocol (communication over HTTP).
      </para>
   </section>
   <section>
      <title>Dumping the Test Archives</title>
      <para>
         As you have learned, when the test suite is executing using
         in-container mode, each test class is packaged as a deployable archive
         and deployed to the container. The test is then executed within the
         context of the deployed application. This leaves room for errors in
         packaging. When investigating a test failure, you may find it helpful
         to inspect the archive after it's generated. The TCK (or Arquillian respectively)
         can accommodate this type of inspection by "dumping" the generated archive to disk.
      </para>
      <para>
         The feature just described is activated in the Arquillian configuration file (<xref linkend="arquillian-settings"/>).
         In order to export the test archive you'll have to add the <literal>deploymentExportPath</literal> property element inside <literal>engine</literal> element and assign
         a relative or absolute directory where the test archive should be exported, e.g.:
         </para>
         <programlisting><![CDATA[
            <engine>
                <property name="deploymentExportPath">target/</property>
            </engine>
         ]]></programlisting>
         <para>
          Arquillian will export the archive to that location for any test you run.
      </para>
      <para>
        To enable the export for just a single test, use the VM argument
        <literal>arquillian.deploymentExportPath</literal>:
      </para>
      <programlisting>-Darquillian.deploymentExportPath=target/deployments/</programlisting>
   </section>
   <!--
vim: ts=3:sw=3:tw=80:set expandtab
-->
</chapter>
